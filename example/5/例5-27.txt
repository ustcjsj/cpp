#include <iostream>
using namespace std;
class B
{  	public:
		int b;
		
		B() {}
		B(int p) {b=p;}

   		virtual void f() { cout<<"b="<<b<<endl; }
 };
 class D:public B{
	private:
		int d;
	public:
		D(){}
		explicit D(B b) { //转型构造函数 explicit
			cout<<"执行转型构造函数"<<endl;
			this->b=b.b;  d=-1;
		}
		D(int p1,int p2):B(p1) { d=p2;}

		virtual void m(){cout<<b<<","<<d<<endl;}
}; 
 int main(){
	 B *bp = new D(1,2); //赋值兼容（类型适应）
	 bp->f();   //不能 bp->m();
	 cout<<"******"<<endl;
	 
	 D* p = dynamic_cast<D*> (new B(3));  //不能 D* p = new B(3);
	 if(p) 
	 {	p->f();
		p->m();	//将m改成非虚函数，vs2010下正确运行
	 }
	 else
		 cout<<"Case Error"<<endl;
	 cout<<"******"<<endl;
	 
	 B b(4);	D d(5,6);
	 b=d; //赋值兼容（类型适应）
	 b.f(); //不能 b.m();
	//d= b; //转型构造函数(删explicit)
	d=static_cast<D>(b);  //必须有B类-〉D类的转型构造函数
	d.m();
 	return 0;    
 }
